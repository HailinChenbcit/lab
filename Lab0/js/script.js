class Button {
  constructor(color, width, height, top, left, order) {
    this.color = color;
    this.width = width;
    this.height = height;
    this.top = top;
    this.left = left;
    this.order = order;
  }

  createButton() {
    const button = document.createElement("button");
    button.className = "game-button";
    button.style.backgroundColor = this.color;
    button.style.width = `${this.width}px`;
    button.style.height = `${this.height}px`;
    button.style.position = "absolute";
    button.style.top = `${this.top}px`;
    button.style.left = `${this.left}px`;
    button.dataset.index = this.order;
    button.disabled = true;
    button.textContent = this.order + 1;
    return button;
  }
}

class UIManager {
  constructor(container, messageElement) {
    this.container = container;
    this.messageElement = messageElement;
  }

  updateMessage(text) {
    this.messageElement.textContent = text;
  }

  addButton(buttonElement) {
    this.container.appendChild(buttonElement);
  }

  clearContainer() {
    this.container.innerHTML = "";
  }

  enableButtons() {
    for (const button of this.container.children) {
      button.textContent = "";
      button.disabled = false;
    }
  }

  disableButtons() {
    for (const button of this.container.children) {
      button.disabled = true;
    }
  }

  revealOrder(originalOrder) {
    for (const button of this.container.children) {
      const index = parseInt(button.dataset.index, 10);
      button.textContent = originalOrder[index] + 1;
      button.disabled = true;
    }
  }
}

class Game {
  constructor(numOfButtons, uiManager) {
    this.numOfButtons = numOfButtons;
    this.uiManager = uiManager;
    this.buttons = [];
    this.originalOrder = [];
    this.userOrder = [];
  }

  initializeGame() {
    this.uiManager.clearContainer();
    this.buttons = [];
    this.originalOrder = [];
    this.userOrder = [];

    const buttonWidth = 150;
    const buttonHeight = 100;
    const padding = 20;
    const totalWidth = this.numOfButtons * (buttonWidth + padding) - padding;
    const startX = Math.max((window.innerWidth - totalWidth) / 2, 0);

    for (let i = 0; i < this.numOfButtons; i++) {
      const top = 50;
      const left = startX + i * (buttonWidth + padding);

      const button = new Button(
        this.getRandomColor(),
        buttonWidth,
        buttonHeight,
        top,
        left,
        i
      );

      this.buttons.push(button);
      this.originalOrder.push(i);

      const htmlButton = button.createButton();

      this.uiManager.addButton(htmlButton);
    }

    this.uiManager.updateMessage("");
    setTimeout(() => this.scrambleButtons(), this.numOfButtons * 1000);
  }
  // this function generated by chatGPT
  scrambleButtons() {
    let moves = this.numOfButtons;
    const scrambleInterval = setInterval(() => {
      if (moves <= 0) {
        clearInterval(scrambleInterval);
        this.uiManager.enableButtons();
        this.prepareForUserInput();
        return;
      }

      for (const button of this.uiManager.container.children) {
        const maxTop = window.innerHeight - 150;
        const maxLeft = window.innerWidth - 200;

        button.style.top = `${this.getRandomPosition(maxTop)}px`;
        button.style.left = `${this.getRandomPosition(maxLeft)}px`;
      }
      moves--;
    }, 1000);
  }

  prepareForUserInput() {
    for (const button of this.uiManager.container.children) {
      button.addEventListener("click", (event) => this.handleUserClick(event));
    }
    this.uiManager.updateMessage(messages.labels.clickOrder);
  }

  handleUserClick(event) {
    const clickedIndex = parseInt(event.target.dataset.index, 10);

    if (clickedIndex === this.originalOrder[this.userOrder.length]) {
      this.userOrder.push(clickedIndex);
      event.target.textContent = clickedIndex + 1;

      if (this.userOrder.length === this.originalOrder.length) {
        this.uiManager.updateMessage(messages.labels.excellentMemory);
        this.uiManager.disableButtons();
      }
    } else {
      this.uiManager.updateMessage(messages.errors.wrongOrder);
      this.uiManager.revealOrder(this.originalOrder);
    }
  }
  // this function generated by chatGPT
  getRandomColor() {
    let r, g, b;

    do {
      r = Math.floor(Math.random() * 256);
      g = Math.floor(Math.random() * 256);
      b = Math.floor(Math.random() * 256);
    } while (r > 200 && g > 200 && b > 200);

    return `rgb(${r}, ${g}, ${b})`;
  }
  // this function generated by chatGPT
  getRandomPosition(max) {
    return Math.floor(Math.random() * max);
  }
}

const goButton = document.getElementById("go-button");
const buttonsContainer = document.getElementById("buttons-container");
const messageElement = document.getElementById("message");
const numButtonsInput = document.getElementById("num-buttons");

numButtonsInput.addEventListener("input", () => {
  const numButtons = parseInt(numButtonsInput.value, 10);

  if (isNaN(numButtons) || numButtons < 3 || numButtons > 7) {
    goButton.disabled = true;
    message.textContent = messages.errors.requiredField.requiredField;
  } else {
    goButton.disabled = false;
    message.textContent = "";
  }
});

goButton.addEventListener("click", () => {
  const numButtons = parseInt(document.getElementById("num-buttons").value, 10);
  if (isNaN(numButtons) || numButtons < 3 || numButtons > 7) {
    messageElement.textContent = messages.errors.requiredField.requiredField;
    return;
  }

  const uiManager = new UIManager(buttonsContainer, messageElement);
  const game = new Game(numButtons, uiManager);
  game.initializeGame();
});
